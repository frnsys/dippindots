#!/usr/bin/env fish

set -U EDITOR vim
set -U VISUAL vim
set -U LANG en_US
set -U LC_ALL en_US.UTF-8

set -U fish_greeting # Hide greeting
fish_vi_key_bindings
function fish_mode_prompt; end # Hide vi mode
function fish_prompt -d "Custom prompt"
    # Define shorthands for hostnames.
    set full_hostname (hostname)
    switch $full_hostname
        case "anarres"
            set shorthand_name "@"
        case "localhost"
            set shorthand_name "âŒ˜"
        case '*'
            set shorthand_name $full_hostname  # Fallback to full hostname
    end

    printf '%s%s%s:%s%s%s:%s%s%s > ' \
        (set_color "#00af87") $shorthand_name (set_color "#333333") (set_color "#FD453A") (prompt_pwd) (set_color "#333333") (set_color "#484848") (fish_git_prompt %s) (set_color normal)
end

set PATH $HOME/.bin $HOME/.local/bin $HOME/.cargo/bin /usr/sbin /var/lib/flatpak/exports/bin/ $PATH

if type -q gsettings
    gsettings set org.gnome.desktop.interface color-scheme prefer-dark
end

if test -f ~/.local/bin/mise
    # node, python
    ~/.local/bin/mise activate fish | source
end

# fzf
fzf --fish | source

# Easier navigation
abbr -a .. "cd .."
abbr -a ... "cd ../.."
abbr -a .... "cd ../../.."
abbr -a ..... "cd ../../../.."

# To avoid accidentally overwriting files
abbr -a mv "mv -i"

# Git
abbr -a gd "git diff"
abbr -a ga "git add"
abbr -a gap "git add -p"
abbr -a gaa "git add -A"
abbr -a gc "git commit"
abbr -a gp "git push"
abbr -a gpl "git pull"
abbr -a gm "git merge --no-ff"
abbr -a gch "git checkout"
abbr -a gcb "git checkout -b"
abbr -a gbd "git branch -d"
abbr -a gds "git diff --staged"
abbr -a gsu "git submodule foreach git pull origin master"

# Shortcuts
abbr -a v "vi ."
abbr -a b "bat"
abbr -a j "just"
abbr -a c "cargo"
abbr -a dots "cd ~/.dots"
abbr -a envim "cd ~/.dots/dots/nvim; vi ."
abbr -a n "cd ~/notes"
abbr -a w "cd ~/work"
abbr -a p "cd ~/projects"
abbr -a dl "cd ~/downloads"
abbr -a ytdl "yt-dlp -f 'bv[height<=1080]+ba'"
abbr -a ytdlmp3 "yt-dlp --extract-audio --audio-format mp3"
abbr -a publish "port build spaceandtimes; port sync spaceandtimes ftseng@starbase:/srv/spaceandtimes"

function y
	set tmp (mktemp -t "yazi-cwd.XXXXXX")
	yazi $argv --cwd-file="$tmp"
	if set cwd (command cat -- "$tmp"); and [ -n "$cwd" ]; and [ "$cwd" != "$PWD" ]
		builtin cd -- "$cwd"
	end
	rm -f -- "$tmp"
end

function rand -d "Generate random string"
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1
end

function flac2mp3
    set --local input $argv[1]
    set --local output (path change-extension mp3 $input)
    ffmpeg -i "$input" -ab 320k -map_metadata 0 -id3v2_version 3 "$output"
    echo "$output"
end

function mkv2mp4
    set --local input $argv[1]
    set --local output (path change-extension mp4 $input)
    ffmpeg -i "$input" -preset veryfast -c:v libx264 -c:a aac "$output"
end

function mp32m4a
    set --local input $argv[1]
    set --local output (path change-extension m4a $input)
    ffmpeg -i "$input" -c:a libfdk_aac -vbr 4 "$output"
end

function shrinkvid
    # libx264 is way faster than libx265 but maybe doesn't get as small
    # higher crf -> lower quality
    set --local input $argv[1]
    set --local output (path change-extension sm.mp4 $input)
    ffmpeg -i "$input" -vf "scale='if(gt(ih,720),trunc(oh*a/2)*2,iw)':'if(gt(ih,720),720,ih)'" -vcodec libx264 -crf 23 -preset fast -c:a aac "$output"
end

function gitsizes
    git rev-list --objects --all \
      | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
      | awk '/^blob/ {print $3, $4}' \
      | sort -nr \
      | head -20
end

# For colorschemes
# - <https://github.com/junegunn/fzf/wiki/Color-schemes>
# - <https://minsw.github.io/fzf-color-picker/>
# Bindings:
#   alt-p: move up
#   alt-n: move down
#   alt-': enable jump
function _fzf
    fzf --exact --info=inline \
        --color=bg+:#262626,fg+:#f9d284,bg:#121212,hl:#00af87,hl+:#00af87,gutter:#121212,info:#00af87,pointer:#00af87,prompt:#ff2f6d \
        --bind=alt-\':jump-accept
end

# alt-"
function _dive
    # -t d: directories only
    # -d 5: max depth 8
    set --local choice $(fd -t d -d 8 . . | _fzf);
        and cd $choice;
        and commandline -f repaint
end
bind -M insert \e\" '_dive'
bind -M default \e\" '_dive'

# alt-'
function _seek
    # -t d: directories only
    # -d 8: max depth 8
    set --local choice $(fd -t d -d 8 --exclude musics . ~ | _fzf);
        and cd $choice;
        and commandline -f repaint
end
bind -M insert \e\' '_seek'
bind -M default \e\' '_seek'

# alt-r
function _command_history
    # 1. Removes trailing whitespace
    # 2. Removes commands <=5 in length
    # 3. Sorts and then counts occurrences
    # 4. Remove commands with less than n counts (`awk '$1 >= n'`)
    # 5. Sorts by counts
    # 6. Removes the counts so we're just left with the command
    set --local choice $(history | awk '{$1=$1};1' | awk 'length($0)>5' | sort | uniq -c | awk '$1 >= 0' | sort -nr | sed 's/\s*[0-9]* //' | _fzf);
        and $choice;
        and commandline -f repaint
end
bind -M insert \er '_command_history'
bind -M default \er '_command_history'

# alt-i
# https://stackoverflow.com/a/76799272
function _pick_and_insert
    set --local path $(fd . . | _fzf); and commandline -i $path
end
bind -M insert \ei '_pick_and_insert'
bind -M default \ei '_pick_and_insert'

# ctrl-e to accept autosuggestion
bind -M insert \ce accept-autosuggestion

# Color theme
set -Ux fish_color_normal white
set -Ux fish_color_command yellow
set -Ux fish_color_param yellow
set -Ux fish_color_quote yellow
set -Ux fish_color_redirection --bold blue
set -Ux fish_color_end brblue
set -Ux fish_color_error red
set -Ux fish_color_comment white
set -Ux fish_color_selection brblack
set -Ux fish_color_search_match --background=black
set -Ux fish_color_operator --bold yellow
set -Ux fish_color_escape cyan
set -Ux fish_color_cwd --bold brblue
set -Ux fish_color_autosuggestion brblack
set -Ux fish_color_user --bold brcyan
set -Ux fish_color_host --bold brgreen
set -Ux fish_color_host_remote --bold red
set -Ux fish_color_cancel red

# Needed for GPG to work correctly
set -x GPG_TTY (tty)
set -e GPG_AGENT_INFO
gpg-connect-agent updatestartuptty /bye >/dev/null 2>&1

# Launch WM from the login tty.
if test -z "$DISPLAY"; and test (tty) = "/dev/tty1"
    niri --session
end
