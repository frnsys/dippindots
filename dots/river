#!/bin/bash
# To debug, start `river` with:
#   river -log-level debug > river.log 2>&1
# You can also make changes then exit with `riverctl exit` and relaunch.

# Wallpaper
swaybg -o '*' -i ~/.wall.jpg -m fill &

# Setup display management and scaling.
kanshi &

# Fonts
fc-cache -fv &

# Fix for xdg-desktop-portal failing,
# causing slow GTK application start ups
# <https://github.com/swaywm/sway/issues/5732>
systemctl --user import-environment

riverctl map normal Super Return spawn 'kitty'
riverctl map normal Super N spawn 'connect'
riverctl map normal Super Equal spawn 'mpc toggle'
riverctl map normal Super Plus spawn 'mpvc toggle'
riverctl map normal Super Semicolon spawn 'kitty --title ncmpcpp -e ncmpcpp'
riverctl map normal Super+Shift Semicolon spawn 'kitty --title pulsemixer -e pulsemixer'
riverctl map normal Super+Shift B spawn 'kitty --title bluetuith -e bluetuith'
riverctl map normal Super Space spawn 'bemenu-run -l 10 -p ">"'
riverctl map normal Super E spawn 'notify-send -t 5000 "$(date '\''+%m/%d %H:%M'\'')" "$(acpi)"'
riverctl map normal Super X spawn 'makoctl mode -t do-not-disturb'
riverctl map normal Super P spawn 'kitty --title kpass -e kpass ~/docs/pass.kdbx'
riverctl map normal Super C spawn 'kitty --title agenda -e bash -c '\''agenda view | less -R'\'''
riverctl map normal Super T spawn 'kitty --title todo --working-directory ~/notes -e vi todo.md'
riverctl map normal Super B spawn 'kitty --title yazi --working-directory ~ -e yazi'
riverctl map normal Super+Shift 0 spawn 'kitty --title yazi --working-directory ~/docs/shots -e yazi'
riverctl map normal Super G spawn 'hyprpicker --autocopy'
riverctl map normal Super Z spawn 'pkill -USR1 gammastep'

# Force close a window
riverctl map normal Super+Shift+Alt Q close

# Super+Shift+E to exit river
# riverctl map normal Super+Shift E exit

# Move focus across windows
riverctl map normal Super H focus-view left
riverctl map normal Super L focus-view right
riverctl map normal Super J focus-view down
riverctl map normal Super K focus-view up
riverctl map normal Super I focus-view next
riverctl map normal Super O focus-view previous

# Swap windows
riverctl map normal Super+Shift H swap left
riverctl map normal Super+Shift L swap right
riverctl map normal Super+Shift J swap down
riverctl map normal Super+Shift K swap up

# Go to previously-focused workspace
riverctl map normal Super Apostrophe focus-previous-tags

# Change size of main tile
riverctl map -repeat normal Shift+Alt H send-layout-cmd rivercarro "main-ratio -0.05"
riverctl map -repeat normal Shift+Alt L send-layout-cmd rivercarro "main-ratio +0.05"

# Note that this turns a tiled window into a floating window.
riverctl map-pointer normal Super BTN_LEFT move-view
riverctl map-pointer normal Super BTN_RIGHT resize-view

# river doesn't support prev/next workspaces (or rather "tags")
# but this script let's us essentially do that.
cat << 'EOF' > "/tmp/ws_ctrl"
#!/bin/bash
input="$1"

sticky_tag=$((1 << 31))

function go_to_tag() {
    echo $1 > "/tmp/ws_tag"
    tags=$((1 << ($1 - 1)))
    riverctl set-focused-tags $(($sticky_tag + $tags))
}

case "$input" in
    1|2|3|4)
        go_to_tag $input
        ;;
    next)
        input=$(cat /tmp/ws_tag)
        ((input++))
        if [ "$input" -gt 4 ]; then
            input=1
        fi
        go_to_tag $input
        ;;
    prev)
        input=$(cat /tmp/ws_tag)
        ((input--))
        if [ "$input" -lt 1 ]; then
            input=4
        fi
        go_to_tag $input
        ;;

    *)
        echo "Input not recognized"
        ;;
esac
EOF
chmod +x "/tmp/ws_ctrl"

all_tags=$(((1 << 32) - 1))
sticky_tag=$((1 << 31))
all_but_sticky_tag=$(( $all_tags ^ $sticky_tag ))

riverctl map normal Super Y toggle-view-tags $sticky_tag
riverctl spawn-tagmask ${all_but_sticky_tag}

# Tags 1-4 (workspaces)
for i in $(seq 1 4)
do
    tags=$((1 << ($i - 1)))
    riverctl map normal Super $i spawn "/tmp/ws_ctrl $i"
    riverctl map normal Super+Shift $i set-view-tags $tags
done
riverctl map normal Super BracketLeft spawn "/tmp/ws_ctrl prev"
riverctl map normal Super BracketRight spawn "/tmp/ws_ctrl next"

riverctl map normal Super S toggle-float
# riverctl map normal Super F toggle-fullscreen

# A fake fullscreen using monocle, which
# keeps floating windows above and lets you
# cycle through windows.
# We don't need to keep track of the monocle on/off
# state for each "workspace" individually because it's
# a global setting.
cat << 'EOF' > "/tmp/ws_fauxfs"
#!/bin/bash

status=$(</tmp/ws_fs)
if [[ "$status" == "off" ]]; then
    riverctl send-layout-cmd rivercarro "main-location monocle"
    echo "on" > "/tmp/ws_fs"
else
    riverctl send-layout-cmd rivercarro "main-location left"
    echo "off" > "/tmp/ws_fs"
fi
EOF
chmod +x "/tmp/ws_fauxfs"
echo "off" > "/tmp/ws_fs"
riverctl map normal Super F spawn "/tmp/ws_fauxfs"

for mode in normal locked
do
    riverctl map -repeat $mode Super XF86AudioRaiseVolume spawn 'pactl -- set-sink-volume @DEFAULT_SINK@ +5%'
    riverctl map -repeat $mode Super XF86AudioLowerVolume spawn 'pactl -- set-sink-volume @DEFAULT_SINK@ -5%'
    riverctl map $mode Super XF86AudioMute spawn 'pactl set-sink-mute @DEFAULT_SINK@ toggle'
    riverctl map $mode Super XF86AudioMicMute spawn 'pactl set-source-mute @DEFAULT_SOURCE@ toggle'

    # For some reason modifiers don't work with these ones?
    riverctl map -repeat $mode None XF86MonBrightnessUp spawn 'brightnessctl set +1000'
    riverctl map -repeat $mode None XF86MonBrightnessDown spawn 'brightnessctl set 1000-'

    # Wake the monitor.
    # Seems to be the only way I can get it to wake when locking the system.
    riverctl map $mode Super+Shift Return spawn 'wlopm --on "*"'
done


# Set background and border color
riverctl background-color 0x161616
riverctl border-color-focused 0x1F6FEB
riverctl border-color-unfocused 0x00000000
riverctl border-width 1

# Input settings
riverctl set-repeat 25 250
riverctl hide-cursor when-typing enabled
riverctl hide-cursor timeout 3000
riverctl focus-follows-cursor disabled

# riverctl list-inputs
TOUCHPAD=pointer-1267-12624-ELAN0670:00_04F3:3150_Touchpad
riverctl input $TOUCHPAD accel-profile flat
riverctl input $TOUCHPAD pointer-accel 0.4
riverctl input $TOUCHPAD click-method clickfinger
riverctl input $TOUCHPAD disable-while-typing enabled
riverctl input $TOUCHPAD natural-scroll disabled
riverctl input $TOUCHPAD tap enabled

# Rules
float_these=(
    "visidata"
    "agenda"
    "yazi"
    "bluetuith"
    "pulsemixer"
    "todo")
for title in "${float_these[@]}"
do
    riverctl rule-add -title $title float
    riverctl rule-add -title $title dimensions 720 480
done
riverctl rule-add -title '*mpv*' float
riverctl rule-add -title 'ncmpcpp' float
riverctl rule-add -title 'vu' float
riverctl rule-add -title 'md-vu-preview' float
riverctl rule-add -title 'md-vu-preview' position 9999 0
riverctl rule-add -title 'sema' tags $sticky_tag

# Keepass anchored to bottom
riverctl rule-add -title 'kpass' float
riverctl rule-add -title 'kpass' position 0 9999
riverctl rule-add -title 'kpass' dimensions 320 360

# Use server-side decorations for consistency
# in borders, etc.
riverctl rule-add ssd

# Other daemons
batt mon &
agenda remind 5 &
gammastep &
mako &
sema &

# Lock after 5min
# Sleep after 15min
# To wake the monitor use `Super+Shift Return` (see below).
swayidle -w \
    timeout 300 '~/.bin/lock' \
    before-sleep '~/.bin/lock' \
    timeout 900 'systemctl suspend' &

# Prevent sleep when audio is playing
sway-audio-idle-inhibit &

# Layout
riverctl default-layout rivercarro
exec rivercarro -inner-gaps 1 -outer-gaps 1
