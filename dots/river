#!/bin/bash
# To debug, start `river` with:
#   river -log-level debug > river.log 2>&1
# You can also make changes then exit with `riverctl exit` and relaunch.

# Wallpaper
swaybg -o '*' -i ~/.wall.jpg -m fill &

# Setup display management and scaling.
kanshi &

# Fonts
fc-cache -fv &

# Audio crackling fix
bash ~/.dots/dots/misc/audio.sh &

# Fix for xdg-desktop-portal failing,
# causing slow GTK application start ups
# <https://github.com/swaywm/sway/issues/5732>
systemctl --user import-environment

riverctl map normal Super Return spawn 'kitty'
riverctl map normal Super Equal spawn 'mpc toggle'
riverctl map normal Super Plus spawn 'mpvc -S /tmp/mpvsocket toggle'
riverctl map normal Super Semicolon spawn 'kitty --title ncmpcpp -e ncmpcpp'
riverctl map normal Super+Shift Semicolon spawn 'kitty --title pulsemixer -e pulsemixer'
riverctl map normal Super Space spawn 'bemenu-run -l 10 -p ">"'
riverctl map normal Super B spawn 'kitty --title bluetuith -e bluetuith'
riverctl map normal Super E spawn 'info'
riverctl map normal Super W spawn 'notify-send "$(date '\''+%m/%d %H:%M'\'')" "\n$(curl wttr.in/?format="%l\n%C+%t\n%h+%w+%P")"'
riverctl map normal Super+Shift W spawn 'kitty --title meteo -e bash -c '\''unbuffer wthrr -f d | LESSUTFBINFMT="*n%C" less -R'\'''
riverctl map normal Super X spawn 'makoctl mode -t do-not-disturb'
riverctl map normal Super P spawn 'kitty --title kpass -o EDITOR=nvim -e kpass ~/docs/pass.kdbx'
riverctl map normal Super C spawn 'kitty --title agenda -e bash -c '\''agenda view | less -R'\'''
riverctl map normal Super T spawn 'kitty --title todo --working-directory ~/notes -e nvim todo.md'
riverctl map normal Super G spawn 'hyprpicker --autocopy'
# riverctl map normal Super Z spawn 'pkill -USR1 gammastep'

# Force close a window
riverctl map normal Super+Shift+Alt Q close

# Super+Shift+E to exit river
# riverctl map normal Super+Shift E exit

# Move focus across windows
riverctl map normal Super H focus-view next
riverctl map normal Super L focus-view next

# Swap windows
riverctl map normal Super+Shift H swap left
riverctl map normal Super+Shift L swap right
riverctl map normal Super+Shift J swap down
riverctl map normal Super+Shift K swap up

# Go to previously-focused workspace
riverctl map normal Super Apostrophe focus-previous-tags

# Second monitor
riverctl map normal Super+Control M send-to-output next
riverctl map normal Super+Control J focus-output next
riverctl map normal Super+Control K focus-output next

# Note that this turns a tiled window into a floating window.
riverctl map-pointer normal Super BTN_LEFT move-view
riverctl map-pointer normal Super BTN_RIGHT resize-view
riverctl map-pointer normal None BTN_TOUCH move-view # TODO doesnt work

# river doesn't support prev/next workspaces (or rather "tags")
# but this script let's us essentially do that.
cat << 'EOF' > "/tmp/ws_ctrl"
#!/bin/bash
input="$1"

sticky_tag=$((1 << 31))

function go_to_tag() {
    echo $1 > "/tmp/ws_tag"
    tags=$((1 << ($1 - 1)))
    riverctl set-focused-tags $(($sticky_tag + $tags))
}

case "$input" in
    1|2|3)
        go_to_tag $input
        ;;
    next)
        input=$(cat /tmp/ws_tag)
        ((input++))
        if [ "$input" -gt 3 ]; then
            input=1
        fi
        go_to_tag $input
        ;;
    prev)
        input=$(cat /tmp/ws_tag)
        ((input--))
        if [ "$input" -lt 1 ]; then
            input=3
        fi
        go_to_tag $input
        ;;

    *)
        echo "Input not recognized"
        ;;
esac
EOF
chmod +x "/tmp/ws_ctrl"

all_tags=$(((1 << 32) - 1))
sticky_tag=$((1 << 31))
all_but_sticky_tag=$(( $all_tags ^ $sticky_tag ))

riverctl map normal Super Y toggle-view-tags $sticky_tag
riverctl spawn-tagmask ${all_but_sticky_tag}

# Tags 1-3 (workspaces)
for i in $(seq 1 3)
do
    tags=$((1 << ($i - 1)))
    riverctl map normal Super $i spawn "/tmp/ws_ctrl $i"
    riverctl map normal Super+Shift $i set-view-tags $tags
done
riverctl map normal Super BracketLeft spawn "/tmp/ws_ctrl prev"
riverctl map normal Super BracketRight spawn "/tmp/ws_ctrl next"

riverctl map normal Super S toggle-float
# riverctl map normal Super F toggle-fullscreen
riverctl map normal Super F send-layout-cmd filtile "monocle"
riverctl map normal Super+Shift F send-layout-cmd filtile "flip"

for mode in normal locked
do
    riverctl map -repeat $mode None XF86AudioRaiseVolume spawn 'pactl -- set-sink-volume @DEFAULT_SINK@ +5%'
    riverctl map -repeat $mode None XF86AudioLowerVolume spawn 'pactl -- set-sink-volume @DEFAULT_SINK@ -5%'
    riverctl map $mode None XF86AudioMute spawn 'pactl set-sink-mute @DEFAULT_SINK@ toggle'
    riverctl map $mode None XF86AudioMicMute spawn 'pactl set-source-mute @DEFAULT_SOURCE@ toggle'
    riverctl map -repeat $mode None XF86MonBrightnessUp spawn 'brightnessctl set +100'
    riverctl map -repeat $mode None XF86MonBrightnessDown spawn 'brightnessctl set 100-'
done

# Input settings
riverctl set-repeat 25 250
riverctl hide-cursor when-typing enabled
riverctl hide-cursor timeout 3000
riverctl focus-follows-cursor disabled
riverctl xcursor-theme Adwaita 24

# riverctl list-inputs
TOUCHPAD=pointer-2362-597-PNP0C50:00_093A:0255_Touchpad
riverctl input $TOUCHPAD accel-profile flat
riverctl input $TOUCHPAD pointer-accel 0.5
riverctl input $TOUCHPAD click-method clickfinger
riverctl input $TOUCHPAD disable-while-typing enabled
riverctl input $TOUCHPAD natural-scroll disabled
riverctl input $TOUCHPAD scroll-method two-finger
riverctl input $TOUCHPAD tap enabled

TOUCHSCREEN=touch-1539-61441-NVTK0603:00_0603:F001
riverctl input $TOUCHSCREEN tap enabled
riverctl input $TOUCHSCREEN drag enabled
riverctl input $TOUCHSCREEN map-to-output eDP-1

MOUSE=pointer-7119-5-USB_Optical_Mouse
riverctl input $MOUSE accel-profile flat
riverctl input $MOUSE pointer-accel 0.6

# Rules
float_these=(
    "float"
    "agenda"
    "yazi"
    "bluetuith"
    "pulsemixer"
    "todo")
for title in "${float_these[@]}"
do
    riverctl rule-add -title $title float
    riverctl rule-add -title $title dimensions 640 480
done
riverctl rule-add -title '*mpv*' float
riverctl rule-add -title 'ncmpcpp' float
riverctl rule-add -title 'vu' float
riverctl rule-add -title 'md-vu-preview' float
riverctl rule-add -title 'md-vu-preview' position 9999 0
riverctl rule-add -title 'sema' tags $sticky_tag
riverctl rule-add -title 'meteo' float
riverctl rule-add -title 'meteo' dimensions 720 480

# Keepass and OTP anchored to bottom
riverctl rule-add -title 'kpass' float
riverctl rule-add -title 'kpass' position 0 9999
riverctl rule-add -title 'kpass' dimensions 320 360

# Use server-side decorations for consistency
# in borders, etc.
riverctl rule-add ssd

# Other daemons
batt mon &
agenda remind 5 &
gammastep &
mako &
sema &
kbdd &

# Lock after 5min
# Sleep after 15min
# To wake the monitor use `Super+Shift Return` (see below).
swayidle -w \
    timeout 300 '~/.bin/lock' \
    before-sleep '~/.bin/lock' \
    timeout 900 'systemctl suspend' &

# Prevent sleep when audio is playing
bash -c 'while true; do sway-audio-idle-inhibit; sleep 1; done' &

# Layout
riverctl default-layout filtile

# Set background and border color
riverctl background-color 0x161616
riverctl border-color-focused 0x1F6FEB
riverctl border-color-unfocused 0x00000000
riverctl border-width 1

filtile smart-padding 5, view-padding 0, outer-padding 0 &
