# Keybindings

# Requires:
# - fzf
# - fd
# - zoxide

# Notes on the bind commands:
# - \e is "alt", thus e.g. "\e;" is <alt+;>
# - \C-u: clears the current input
# - \r: return to run the command

# For colorschemes
# - <https://github.com/junegunn/fzf/wiki/Color-schemes>
# - <https://minsw.github.io/fzf-color-picker/>
# Bindings:
#   alt-p: move up
#   alt-n: move down
#   alt-': enable jump
_fzf() {
    fzf --exact --info=inline \
        --color=bg+:#262626,fg+:#f9d284,bg:#121212,hl:#00af87,hl+:#00af87,gutter:#121212,info:#00af87,pointer:#00af87,prompt:#ff2f6d \
        --bind=alt-p:up,alt-n:down,alt-\':jump-accept
}

# cd from directory history
üìú() {
    CHOICE=$(zoxide query -l | _fzf) && z ${CHOICE}
}
bind "\"\e'\": \"\C-uüìú\r\""

# cd from current dir
üç•() {
    # -t d: directories only
    # -d 3: max depth 3
    CHOICE=$(fd -t d -d 3 . | _fzf) && z ${CHOICE}
}
bind '"\e;": "\C-uüç•\r"'

# cd from home
‚õ∫Ô∏è() {
    # -t d: directories only
    # -d 5: max depth 5
    CHOICE=$(fd -t d -d 3 --exclude musics . ~ | _fzf) && z ${CHOICE}
}
bind '"\e\"": "\C-u‚õ∫Ô∏è\r"'


# https://stackoverflow.com/a/76799272
__pick_and_insert() {
    local path
    path=$(fd . "$1" | _fzf)
    if [ -n "$path" ]; then
        file=$(printf "%q" "$path") # escape special characters
        READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$file${READLINE_LINE:$READLINE_POINT}"
        READLINE_POINT=$((READLINE_POINT + ${#file}))
    fi
}

# Insert file/dir from current dir
bind -x '"\ei": "__pick_and_insert ."'

# Insert file/dir from home
bind -x '"\eI": "__pick_and_insert ~"'

# Search command history
__command_history() {
    local cmd
    # 1. Removes trailing whitespace
    # 2. Removes commands <=5 in length
    # 3. Sorts and then counts occurrences
    # 4. Remove commands with less than 3 counts
    # 5. Sorts by counts
    # 6. Removes the counts so we're just left with the command
    cmd=$(cat ~/.bash_history | awk '{$1=$1};1' | awk 'length($0)>5' | sort | uniq -c | awk '$1 >= 3' | sort -nr | sed 's/\s*[0-9]* //' | _fzf)
    if [ -n "$cmd" ]; then
        READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}$cmd${READLINE_LINE:$READLINE_POINT}"
        READLINE_POINT=$((READLINE_POINT + ${#cmd}))
    fi
}
bind -x '"\er": "__command_history"'
bind -x '"\C-r": "__command_history"'

# Open file or directory in neovim
bind -x '"\ev": "nvim $(fd . | _fzf)"'
