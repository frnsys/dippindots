#!/bin/bash
# Various commands for using SSH tunnels

CMD=$1
shift # shift the args so that $2 is now $1

if [ -z $CMD ]; then
    echo "Please specify a command: go, make, push, pull, sync."
    exit 1

# Connects to a remote server with a SSH tunnel via $BRIDGE
elif [ $CMD == 'go' ]; then
    BRIDGE=$1
    PORT=$2

    if [ "$#" -ne 3 ]; then
        ssh -Y -t ${BRIDGE} 'ssh -Y localhost -p '${PORT}
    else
        REMOTE_CMD=$3
        ssh -Y -t ${BRIDGE} 'ssh -Y localhost -p '${PORT} ${REMOTE_CMD}
    fi

elif [ $CMD == 'close' ]; then
    BRIDGE=$1
    /usr/bin/ssh -S /tmp/tunnel_%h.sock -O exit $BRIDGE

# Creates an SSH tunnel via $BRIDGE
elif [ $CMD == 'make' ]; then
    BRIDGE=$1
    BRIDGEPORT=$2
    PORT=$3
    # Check if the tunnel exists
    /usr/bin/ssh -S /tmp/tunnel_%h.sock -O check $BRIDGE > /dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        echo "Creating new tunnel connection to ${BRIDGE}"
        /usr/bin/ssh -f -N -M -S /tmp/tunnel_%h.sock -R ${PORT}:localhost:22 -L${BRIDGEPORT}:${BRIDGE}:22 -o ExitOnForwardFailure=yes ${BRIDGE}
        if [[ $? -eq 0 ]]; then
            echo "Tunnel to ${BRIDGE} created successfully"
        else
            echo "An error occurred creating a tunnel to ${BRIDGE}. Return code: ${?}"
        fi
    fi

# Copy a file via a SSH tunnel host.
# usage: push <user@bridgehost> <port> <user> <path/to/file> <path/to/remote/file>
# where <port> is the port used for the SSH tunnel on <bridgehost>
# and <user> is the user used for the remote host
elif [ $CMD == 'push' ]; then
    FILEPATH=$1
    IFS=: read BRIDGE BRIDGEPORT DESTUSER DEST <<< $2

    # scp to bridge
    scp -r "$FILEPATH" $BRIDGE:/tmp/__pushed

    # scp to remote and remove temp file
    ssh $BRIDGE 'scp -rP '${BRIDGEPORT}' /tmp/__pushed '${DESTUSER}'@localhost:'${DEST}'; rm -rf /tmp/__pushed'

# Get a file via a SSH tunnel host.
# usage: pull <user@bridgehost> <port> <user> <path/to/file>
# where <port> is the port used for the SSH tunnel on <bridgehost>
# and <user> is the user used for the remote host
elif [ $CMD == 'pull' ]; then
    IFS=: read BRIDGE BRIDGEPORT REMOTEUSER REMOTEPATH <<< $1
    DIR=`dirname "${REMOTEPATH}"`
    FILE=`basename "${REMOTEPATH}"`
    DEST=$2

    # ssh into the bridge,
    # on the bridge, ssh into the remote,
    # the stream the tar of the file back
    # we don't scp back b/c the remote machine might not
    # have ssh access to the local machine
    ssh $BRIDGE 'ssh -p '${BRIDGEPORT}' localhost "cd '${DIR}'; tar cJ '"${FILE}"'"' > "/tmp/__pulled.tar.xz"
    tar xJf "/tmp/__pulled.tar.xz" -C /tmp/
    mv "/tmp/$FILE" "$DEST"
    rm /tmp/__pulled.tar.xz

# rsync via a bridge server
# e.g.
#   tunnel sync foo ftseng@starbase.in:10023:pi:~/
# will rsync the `foo` directory
# to the server tunneled to starbase.in:10023
# connecting as the user `pi` to the tunneled server
elif [ $CMD == 'sync' ]; then
    INPUT=$1
    shift
    IFS=: read BRIDGE BRIDGEPORT DESTUSER DEST <<< $1
    shift
    FLAGS=$@
    rsync $FLAGS -azv -e 'ssh -p '$BRIDGEPORT' -o "ProxyCommand ssh '$BRIDGE' -W %h:%p"' "${INPUT}" $DESTUSER@localhost:"$DEST"

else
    echo "Please specify a command: go, make, push, pull, sync."
    exit 1
fi
