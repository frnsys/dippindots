#!/usr/bin/python3
"""
sudo vi /etc/sudoers.d/00_anarres
ftseng  ALL = NOPASSWD: /sbin/iw
ftseng  ALL = NOPASSWD: /sbin/wpa_supplicant
ftseng  ALL = NOPASSWD: /usr/bin/pkill

Make sure the dhcpcd service is running as well

References:
    - <https://wiki.archlinux.org/index.php/Network_configuration/Wireless#Discover_access_points>
    - <https://www.cs.upc.edu/lclsi/Manuales/wireless/files/wpa_supplicant.conf>

"""

import os
import re
import sys
import subprocess

IFACE='wlan0'
NETWORKS_DIR = os.path.expanduser('~/docs/networks')

REGEXS = {
    'signal': 'signal: (-?[^\s]+)',
    'bssid': 'BSS ([0-9a-z:]+)',
    'essid': 'SSID: (.+)?',
    'auth': 'Authentication suites: (.+)',
}
REGEXS = {k: re.compile(r) for k, r in REGEXS.items()}
REQUIRED = ['bssid', 'essid', 'signal']
OPTIONAL = ['auth']
ENC_REGEXS = {
    'wpa2': 'RSN:',
    'wpa1': 'WPA:',
}
ENC_REGEXS = {k: re.compile(r) for k, r in ENC_REGEXS.items()}
IDENTITY_TMPL = '''
network={{
    ssid="{essid}"
    key_mgmt={key_mgmt}
    identity="{identity}"
    password="{password}"
}}
'''

def is_encrypted(cell):
    return any(r.search(cell) is not None for typ, r in ENC_REGEXS.items())

def run(cmd, input=None, notify_on_err=True):
    proc = subprocess.Popen(cmd,
                            stdout=subprocess.PIPE,
                            stdin=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    out, err = proc.communicate(input)
    out = out.decode('utf8')
    err = err.decode('utf8')
    if proc.returncode != 0:
        if notify_on_err: notify(err)
        raise Exception('Non-zero exit code')
    return out.strip()


def scan(iface='wlan0'):
    cmd = ['sudo', 'iw', 'dev', iface, 'scan']
    out = run(cmd)

    # Group cell lines
    # Skip first line
    cells = []
    for l in out.split('\n'):
        # l = l.strip()
        if l.startswith('BSS'):
            cells.append([l])
        else:
            cells[-1].append(l)

    # Extract information
    networks = {}
    for c in cells:
        c = '\n'.join(c)
        try:
            data = {k: REGEXS[k].search(c).group(1) for k in REQUIRED}
        except:
            print(c)
            print('='*20)
            continue
            # raise
        for k in OPTIONAL:
            try:
                data[k] = REGEXS[k].search(c).group(1)
            except:
                continue

        if data['essid'] is None: continue
        id = '{}@{}'.format(data['essid'], data['bssid'].upper())
        data['encryption'] = is_encrypted(c)
        data['auth'] = data.get('auth', '')
        data['signal'] = float(data['signal'])
        networks[id] = data
    print(networks)
    return networks


def dmenu(choices=None, prompt='>', n_lines=10, exit_on_none=True):
    choices = choices or []
    cmd = ['dmenu', '-l', str(n_lines), '-p', prompt]
    inp = '\n'.join(choices).encode('utf8')
    choice = run(cmd, inp)
    if exit_on_none and not choice: sys.exit(0)
    return choice


def connect(conf, iface='wlan0'):
    # Kill existing connection, if any
    proc = subprocess.run(['sudo', 'pkill', 'wpa_supplicant'])

    cmd = ['sudo', 'wpa_supplicant', '-c', conf, '-i', iface]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    while True:
        line = proc.stdout.readline()
        if not line:
            break
        print(line.decode('utf8').strip())


def authenticate(essid, password, outfile):
    out = run(['wpa_passphrase', essid, password])
    with open(outfile, 'w') as f:
        f.write(out)


def identity_authenticate(essid, identity, password, outfile, key_mgmt='WPA-EAP'):
    out = IDENTITY_TMPL.format(
            essid=essid, identity=identity,
            password=password, key_mgmt=key_mgmt).strip()
    with open(outfile, 'w') as f:
        f.write(out)
    return conf


def notify(msg):
    subprocess.run(['notify-send', msg])


if __name__ == '__main__':
    notify('Scanning...')
    networks = scan(IFACE)
    network_id = dmenu(sorted(networks.keys(), key=lambda k: networks[k]['signal'], reverse=True))
    network = networks[network_id]

    conf = os.path.join(NETWORKS_DIR, network_id)
    if not os.path.exists(conf):
        if network['encryption']:
            if 'PSK' in network['auth']:
                password = dmenu(prompt='password')
                authenticate(network['essid'], password, conf)
            elif '802.1X' in network['auth']:
                identity = dmenu(prompt='identity')
                password = dmenu(prompt='password')
                identity_authenticate(network['essid'], identity, password, conf)
            else:
                notify('Unrecognized authentication suite(s): {}'.format(' '.join(network['auth'])))
                sys.exit(1)
        else:
            with open(conf, 'w') as f:
                f.write('network={{\n  ssid="{}"\n  key_mgmt=NONE\n}}'.format(network['essid']))
    connect(conf, IFACE)