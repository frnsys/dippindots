#!/usr/bin/env python3
"""
Test:
curl -X POST -H "Authentication: KEY" -H "Content-Type: application/json" --data '{"foo":"bar"}' http://127.0.0.1:8888
"""

import os
import json
import base64
import hashlib
import argparse
from email import utils
from datetime import datetime
from xml.etree import ElementTree as etree

from collections import defaultdict
from http.server import BaseHTTPRequestHandler, HTTPServer

parser = argparse.ArgumentParser(description='A simple server to receive and save JSON data')
parser.add_argument('FILE', type=str, help='File to save received data')
parser.add_argument('UPLOAD_DIR', type=str, help='Directory to save uploaded files')
parser.add_argument('-p', '--port', type=int, dest='PORT', default=8888, help='Port for server')
parser.add_argument('-k', '--key', type=str, dest='KEY', default=None, help='Secret key to authenticate clients')
args = parser.parse_args()

rss_meta = {
    'title': 'hili',
    'link': 'TODO',
    'description': 'highlights',
}
rss_mapping = {
    'link': lambda i: i['href'],
    'title': lambda i: i['title'],
    'description': lambda i: i['text'],
    'pubDate': lambda i: utils.format_datetime(datetime.fromtimestamp(i['time']/1000))
}

def gen_rss(items):
    rss = etree.Element('rss', version='2.0')
    channel = etree.SubElement(rss, 'channel')
    for key, val in rss_meta.items():
        sub = etree.SubElement(channel, key)
        sub.text = val

    for item in items:
        item_el = etree.SubElement(channel, 'item')
        for tag, fn in rss_mapping.items():
            el = etree.SubElement(item_el, tag)
            el.text = fn(item)
        for tag in item['tags']:
            el = etree.SubElement(item_el, 'category')
            el.text = tag
    return etree.tostring(rss)

class JSONRequestHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        auth_key = self.headers.get('Authentication')
        if args.KEY and args.KEY != auth_key:
            self.send_response(401)
            self.end_headers()
            self.wfile.write(b'unauthorized')
            return

        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()

        # Get data
        self.data_string = self.rfile.read(int(self.headers['Content-Length']))
        self.send_response(200)
        self.end_headers()

        data = self.data_string.decode('utf8')
        data = json.loads(data)

        # If a file is included, save it and save only the filename
        if 'file' in data:
            # Assume that data is base64 encoded
            b64 = base64.b64decode(data['file']['data'])

            # Generate file name by hashing file data
            # and extension based on specified content type
            fname = hashlib.sha1(b64).hexdigest()
            ext = data['file']['type'].split('/')[-1]
            fname = '{}.{}'.format(fname, ext)
            with open(os.path.join(args.UPLOAD_DIR, fname), 'wb') as f:
                f.write(b64)

            # Remove original data,
            # save only filename
            del data['file']['data']
            data['file']['name'] = fname

        # Save data
        with open(args.FILE, 'a') as f:
            f.write(json.dumps(data) + '\n')

        # Response
        self.wfile.write(b'ok')
        return

    def do_GET(self):
        with open(args.FILE, 'r') as f:
            items = map(json.loads, f.read().splitlines())

        if self.path.startswith('/rss.xml'):
            self.send_response(200)
            self.send_header('Content-type', 'text/xml')
            self.end_headers()
            self.wfile.write(gen_rss(items))
        else:
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()

            # Reverse chron
            html = ['''
                <html>
                    <head>
                        <meta charset="utf8">
                        <style>
                            html {
                                overflow-x: hidden;
                            }
                            input {
                                width: 100%;
                                max-width: 720px;
                                margin: 1em auto;
                                display: block;
                            }
                            article {
                                margin: 4em auto;
                                max-width: 720px;
                                line-height: 1.4;
                                padding-bottom: 4em;
                                border-bottom: 2px solid black;
                                font-family: system-ui, sans-serif;
                            }
                            .highlight {
                                margin: 2em 0;
                            }
                            .tags {
                                color: #888;
                                margin-top: 1em;
                                font-size: 0.8em;
                            }
                            a {
                                color: blue;
                            }
                            img {
                                max-width: 100%;
                            }
                        </style>
                    </head>
                    <body>
                        <input type="text" placeholder="Filter by tags (comma-separated)" id="filter" />
                    ''']

            grouped = defaultdict(list)
            for d in items:
                grouped[d['href']].append(d)

            for href, group in sorted(grouped.items(), key=lambda g: -max([d['time'] for d in g[1]])):
                html.append('''
                    <article>
                        <h4><a href="{href}">{title}</a></h4>'''.format(href=href, title=group[0]['title']))
                for d in group:
                    if 'file' in d:
                        # fname = d['file']['name']
                        html.append('''
                            <div class="highlight">
                                <img src="{src}">
                                <p>{text}</p>
                                <div class="tags"><em>{tags}</em></div>
                            </div>
                        '''.format(
                            # src=os.path.join(args.UPLOAD_DIR, fname),
                            src=d['file']['src'],
                            text=d['text'],
                            tags=', '.join(d['tags'])
                        ))
                    else:
                        html.append('''
                            <div class="highlight">
                                {html}
                                <div class="tags"><em>{tags}</em></div>
                            </div>
                        '''.format(
                            html=d['html'],
                            tags=', '.join(d['tags'])
                        ))
                html.append('</article>')

            html.append('''
                <script>
                    const input = document.getElementById('filter');
                    const articles = [...document.querySelectorAll('article')];
                    input.addEventListener('input', () => {
                        if (!input.value) {
                            articles.forEach((el) => {
                                el.style.display = 'block';
                                [...el.querySelectorAll('.highlight')].forEach((h) => {
                                    h.style.display = 'block';
                                });
                            });
                        } else {
                            let vals = input.value.split(',').map((v) => v.trim());
                            articles.forEach((el) => {
                                let matches = 0;
                                [...el.querySelectorAll('.highlight')].forEach((h) => {
                                    let tags = h.querySelector('.tags').innerText.split(',').map((t) => t.trim());
                                    if (vals.every((v) => tags.includes(v))) {
                                        h.style.display = 'block';
                                        matches++;
                                    } else {
                                        h.style.display = 'none';
                                    }
                                });
                                if (matches == 0) {
                                    el.style.display = 'none';
                                } else {
                                    el.style.display = 'block';
                                }
                            });
                        }
                    });
                </script>
            ''')

            html.append('</body></html>')

            # Response
            html = '\n'.join(html).encode('utf8')
            self.wfile.write(html)


if __name__ == '__main__':
    print('Running on port', args.PORT)
    server = HTTPServer(('localhost', args.PORT), JSONRequestHandler)
    server.serve_forever()

