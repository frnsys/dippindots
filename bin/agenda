#!/bin/bash
# This works in tandem with vdirsyncer, which is what
# downloads the ics files.
#
# Commands:
#
#   agenda view [DAYS]
#   Show events upcoming in the next DAYS (default 2)
#
#   agenda remind
#   Processes new and updated events (upcoming event ics files put into UPCOMING_FILE)
#   and sends a reminder notification upcoming events (REMINDER_TIME seconds before, see below).

REMINDER_TIME=300 # seconds
UPCOMING_FILE=~/.calendar/.upcoming

# use system timezone by default.
# the `date` command uses this anyways if --utc is not specified,
# but in some places we are explicit
DEFAULT_TZ=$(cat /etc/timezone)

# For recurring rules
SPD=$((24 * 60 * 60)) # seconds per day
SPW=$((7 * $SPD)) # seconds per week
SPY=$((365 * $SPD)) # seconds per year. TODO what about leap years?
declare -A WEEKDAYS=( [MO]=1 [TU]=2 [WE]=3 [TH]=4 [FR]=5 [SA]=6 [SU]=7 )

# Check if an event is upcoming
check_event() {
    ts=$1
    now=$2
    if [[ "$now" -lt "$ts" ]]; then
        echo "$f" >> "$UPCOMING_FILE"
        return 0
    fi
    return 1
}

# Parse an ics datetime into a format `date` can deal with
parse_dt() {
    dt=$1
    if [[ ${#dt} -lt 9 ]]; then
        echo "${dt:0:4}-${dt:4:2}-${dt:6:2}"
    else
        echo "${dt:0:4}-${dt:4:2}-${dt:6:2}T${dt:9:2}:${dt:11:2}"
    fi
}

# Extract the start datetime (as a UTC timestamp) from an event
# It doesn't seem you can (easily at least) pass associative arrays
# as arguments, so we use it as a global variable, yuck
start_ts() {
    TZ=${event[TZID]:-$DEFAULT_TZ}
    echo $(date +%s --utc --date='TZ="'$TZ'" '$(parse_dt ${event[DTSTART]}))
}

# Calculating elapsed intervals for recurring rules
elapsed_intervals() {
    count=$1
    base_interval=$2
    n_intervals=$(bc -l <<<"$elapsed/$base_interval")
    n_intervals_floor=$(echo $n_intervals | cut -d'.' -f 1)
    n_intervals_floor=${n_intervals_floor:-0}
    echo $n_intervals_floor
}

# Get next datetimes for an interval
get_next() {
    now=$1
    start=$2
    tzid=$3
    base_interval=$4
    extend=${5:-1}
    count=$6

    elapsed=$(($now-$start))

    # Get UTC offset for start time
    start_offset=$(TZ=$tzid date --date @$start +%z)
    sign_a=${start_offset:0:1}
    hours_a=${start_offset:1:2}
    minutes_a=${start_offset:3:4}
    a=$(echo "0${sign_a}(${hours_a} + ${minutes_a}/60)" | bc)

    # Starts in the future
    # TODO maybe should be diff b/c there could be e.g. two close dates in the future
    if [[ $elapsed -lt 0 ]]; then
        echo $start
        return 0
    fi

    # Project out $extend intervals
    if [ -z "${count}" ]; then
        count=$((($elapsed/$base_interval) + $extend))
    fi
    n_intervals=$(elapsed_intervals $count $base_interval)

    # If we haven't reached $count intervals,
    # figure out the next datetime
    if [[ $n_intervals -lt $count ]]; then
        remaining=$(($count - $n_intervals))
        next=$(($start + (($n_intervals+1) * $base_interval)))

        for (( i=0; i<$remaining; ++i)); do
            # TODO check against until?
            next_ts=$(($next + ($i*$base_interval)))

            offset=$(TZ=$tzid date --date @$next_ts +%z)
            sign_b=${offset:0:1}
            hours_b=${offset:1:2}
            minutes_b=${offset:3:4}
            b=$(echo "0${sign_b}(${hours_b} + ${minutes_b}/60)" | bc)
            dst_adjusted=$(echo "(($a - $b) * 60 * 60) + ${next_ts}" | bc)

            echo $dst_adjusted
        done
        return 0
    else
        # Event is all done
        return 1
    fi
}

get_next_daily() {
    # Look ahead 7 days by default
    lookahead=7
    interval=$4
    base_interval=$(($interval*$SPD))
    get_next $1 $2 $3 $base_interval $lookahead $5 $6
}

get_next_yearly() {
    interval=$4
    base_interval=$(($interval*$SPY))
    get_next $1 $2 $3 $base_interval 1 $5 $6
}

get_next_weekly() {
    now=$1
    start=$2
    tzid=$3
    interval=$4
    byday=$5
    count=$6
    base_interval=$(($interval*$SPW))

    if [ -z "${byday}" ]; then
        n_days=1
        STARTS=($start)
    else
        # Get day of week of start time
        # Don't do this as UTC, we want the day of week
        # in the local time zone
        DOW=$(date -d @$start +%u)

        # Get number of weekly repeating days
        n_days=$(($(echo "${byday}" | awk -F"," '{print NF-1}') + 1))

        # Convert to start timestamps
        # for each day in $byday,
        # then sort by start timestamps
        STARTS=()
        while read DAYNAME; do
            DAY=${WEEKDAYS[$DAYNAME]}

            diff=$(($DAY - $DOW))
            if [[ $diff -lt 0 ]]; then
                diff=$(($diff + 7))
            fi
            adjustment=$(($diff * $SPD))
            day_start=$(($start + $adjustment))
            STARTS+=($day_start)
        done < <(echo "$byday" | sed 's/,/\n/g' )
        IFS=$'\n' STARTS=($(sort <<<"${STARTS[*]}")); unset IFS
    fi

    # If count isn't defined, just get the current count and add to it
    if [ -z "${count}" ]; then
        elapsed=$(($now-$start))
        count=$((($elapsed/$base_interval * $n_days) + $n_days))
    fi

    # Each day might have a different count if the
    # overall account and number of set days don't
    # cleanly divide
    base_count=$(($count/$n_days)) # already floor (integer division)
    leftover=$(($count-($base_count*$n_days)))

    index=0
    for start in ${STARTS[@]}; do
        if [[ $index -lt $leftover ]]; then
            count=$(($base_count + 1))
        else
            count=$base_count
        fi

        get_next $now $start $tzid $base_interval 1 $count

        (( index++ ))
    done
}

# Because months aren't fixed intervals of time,
# have to treat differently
get_next_monthly() {
    now=$1
    start=$2
    tzid=$3
    interval=$4
    byday=$5
    count=$6

    # Look ahead 1 month by default
    lookahead=1

    # Not working in seconds here, but months
    base_interval=$interval

    # Extract the time
    time=$(date --utc --date @$start +%H:%M)

    # TODO there may be edge cases here?
    now_month=$(date --utc --date @$now +%-m)
    now_year=$(date --utc --date @$now +%Y)
    start_month=$(date --utc --date @$start +%-m)
    start_year=$(date --utc --date @$start +%Y)

    # Express as just months
    start_month=$(($start_year * 12 + $start_month-1))
    now_month=$(($now_year * 12 + $now_month-1))

    while read months; do
        # Convert back to date
        year=$(($months / 12))
        month=$(($months-($year*12)+1))

        # If $byday is only digits, we assume it's
        # a BYMONTHDAY value
        if [[ $byday =~ ^[0-9]+$ ]]; then
            echo $(date --utc --date="${year}-${month}-${byday}T${time}" +%s)

        # Otherwise, we need to find the correct day
        else
            nth=$(grep -Eo '[0-9]+' <<< "$byday")
            dow=$(grep -Eo '[[:alpha:]]+' <<< "$byday")
            target_dow=${WEEKDAYS[$dow]}

            # Get weekday for first day of month
            first_dow=$(date --utc --date="${year}-${month}-1T${time}" +%u)

            # Figure out when the first target day is,
            # then adjust by necessary number of weeks
            diff=$(($target_dow - $first_dow))
            if [[ $diff -lt 0 ]]; then
                diff=$(($diff + 7))
            fi
            day=$((1+$diff));
            adjustment=$((7 * ($nth-1)))
            day=$(($day+$adjustment))
            echo $(date --utc --date="${year}-${month}-${day}T${time}" +%s)
        fi
    done < <(get_next $now_month $start_month $tzid $base_interval $lookahead $count)
}


# Iterate over the events in a single ics file
iterate_events() {
    handle_event=$1
    rrule=''
    thestarts=()
    exceptions=()
    declare -A recurrences=( )
    declare -A event=( )

    # Join lines if following lines are preceded with a space
    # b/c ics values can wrap like that
    # Then remove VALARM section, since it can interfere (it also has a "DESCRIPTION" key)
    # Also strip out everything before the first VEVENT so VCALENDAR-level properties don't bleed into the first event
    data=$(cat "$2" | sed -e :a -e '$!N;s/\n //;ta' -e 'P;D' | sed '/^BEGIN:VALARM/,/^END:VALARM/ {/.*/d}' | sed '/^BEGIN:VCALENDAR/,/^BEGIN:VEVENT/ {/.*/d}')

    while IFS=: read -r key value; do
      value=${value%$'\r'} # remove DOS newlines

      if [[ $key = END && $value = VEVENT ]]; then
            TZ=${event[TZID]:-$DEFAULT_TZ}
            tsz=$(date +%s --utc --date='TZ="'$TZ'" '$(parse_dt ${event[DTSTART]}))
            echo "+++++++++++++++++"
            echo "EVSTART:${event[DTSTART]}"
            echo "TSEXTRACT:$tsz"
            echo "    :$(date -d @$tsz)"
            thestarts+=($tsz)
            # echo $event
            # echo "events: ${#ics_events[*]}"

            # Single event exceptions
            if [[ -v "event[RECURRENCE-ID]" ]] ; then
                TZ=${event[TZID]:-$DEFAULT_TZ}
                tsx=$(date +%s --utc --date='TZ="'$TZ'" '$(parse_dt ${event[DTSTART]}))
                recurrences[${event[RECURRENCE-ID]}]=$tsx
            fi

            # TODO
        # If handle event returns true (0), break
        # if parse_event $handle_event; then break; fi
          # event=( )

      # Exception dates for recurring events
      elif [[ $key == "EXDATE"* ]]; then
          tzid=${key##*";TZID="}
          exdate=$(date +%s --utc --date='TZ="'$tzid'" '$(parse_dt ${value}))
          exceptions+=($exdate)

      # Use recurrence ids for exceptions
      elif [[ $key == "RECURRENCE-ID"* ]]; then
          tzid=${key##*";TZID="}
          redate=$(date +%s --utc --date='TZ="'$tzid'" '$(parse_dt ${value}))
          event[RECURRENCE-ID]=$redate

      # Recurrence rule
      elif [[ $key == "RRULE" ]]; then
          rrule=$value

      # Event start datetime
      elif [[ $key == "DTSTART;TZID="* ]]; then
        event[TZID]=${key##*";TZID="}
        event[${key%%";"*}]=$value

      else
        event[${key%%";"*}]=$value
      fi
    done <<< $data

    starts=()

    # Treat "now" as the start of today (local time, but as UTC),
    # b/c if we're e.g. 1 minute into an event we still want to see it
    now=$(date --utc -d @$(date -d "today 00:00:00" +%s) +%s)

    echo "--------------------------------"
    echo "${event[SUMMARY]}"
    echo "exceptions: ${exceptions[*]}"
    echo "recurrences: ${recurrences[@]}"
    echo "thestarts: ${thestarts[*]}"
    echo "thestarts first: ${thestarts[0]}"
    echo "$rrule"
    ts=${thestarts[0]}
    tzid=${event[TZID]:-$DEFAULT_TZ} # assuming same timezone. necessary to deal with daylight savings
    echo "FIRST:$(date -d @$ts)"

    # If recurring
    if [ -n "$rrule" ]; then
        declare -A RRULE
        while IFS== read key value; do
            RRULE["$key"]="$value"
        done < <(echo "${rrule}" | sed 's/;/\n/g' )

        count=${RRULE[COUNT]}
        interval=${RRULE[INTERVAL]:-1}

        if [ -n "${RRULE[UNTIL]}" ]; then
            until_ts=$(date +%s --utc --date=$(parse_dt ${RRULE[UNTIL]}))
            # If UNTIL is in the past, we can ignore this event
            if [[ "$now" -gt "$until_ts" ]]; then
                return 0
            fi
        fi

        case ${RRULE[FREQ]} in
            "DAILY")
                starts=$(get_next_daily $now $ts $tzid $interval $count)
                ;;
            "WEEKLY")
                starts=$(get_next_weekly $now $ts $tzid $interval ${RRULE[BYDAY]} $count)
                ;;
            "MONTHLY")
                starts=$(get_next_monthly $now $ts $tzid $interval ${RRULE[BYDAY]:-${RRULE[BYMONTHDAY]}} $count)
                ;;
            "YEARLY")
                starts=$(get_next_yearly $now $ts $tzid $interval $count)
                ;;
            *)
                echo "Unrecognized FREQ: ${RRULE[FREQ]}"
                ;;
        esac

        # Sort starts times
        IFS=$'\n' starts=($(sort <<<"${starts[*]}")); unset IFS

        # No upcoming dates
        if [ -z "$starts" ]; then
            return 0
        fi

        # Debugging
        echo "FIRST:$(date -d @$ts)"
        echo "EVENT:${event[SUMMARY]}"
        echo "BYDAY:${rrule[BYDAY]}"
        for sts in ${starts[@]}; do
            echo $(date -d @$sts)
        done

        for sts in ${starts[@]}; do
            # If not an exception date
            if [[ ! " ${exceptions[@]} " =~ " ${sts} " ]]; then
                # If there is a change to this event
                if [[ -v "recurrences[${sts}]" ]] ; then
                    echo "Recurrence found------------>"
                    reevent=${recurrences[${sts}]}
                    TZ=${reevent[TZID]:-$DEFAULT_TZ}
                    sts=$(date +%s --utc --date='TZ="'$TZ'" '$(parse_dt ${reevent[DTSTART]}))
                fi
                if $handle_event $sts $now; then
                    return 0
                fi
            else
                echo "Exception found------------>"
            fi
        done
    fi
}

# Check if an event is upcoming,
# if so, save its data for later use
is_upcoming() {
    ts=$1
    if [[ "$ts" -gt "$TODAY" && "$ts" -lt "$END_DATE" ]]; then
        file=$(basename $line)
        key="${ts}_${file}"
        events[$key]=$ts
        summaries[$key]=${event[SUMMARY]}
        locations[$key]=${event[LOCATION]}
        descriptions[$key]=${event[DESCRIPTION]}
    fi
    return 1
}

view_upcoming() {
    DAYS=$1
    TODAY=$(date --utc -d @$(date -d "today 00:00:00" +%s) +%s)
    END_DATE=$(date --utc -d @$(date -d "+ $DAYS days 00:00:00" +%s) +%s)

    # Check the upcoming file
    # Can't have nested associative arrays
    # so have separate ones for the fields we want to use
    declare -A events
    declare -A descriptions
    declare -A summaries
    declare -A locations
    while IFS= read -r line; do
        if [ -f "$line" ]; then
            iterate_events is_upcoming $line
        fi
    done < "$UPCOMING_FILE"

    # Sort by timestamp
    # LAST_DAY=""
    # LAST_TS=0
    # mapfile -d '' sorted < <(printf '%s\0' "${!events[@]}" | sort -z)
    # for key in "${sorted[@]}"; do
    #     ts=${events[$key]}
    #     loc=${locations[$key]}
    #     desc=${descriptions[$key]}
    #     summ=${summaries[$key]}
    #     days=$(echo "( `date --utc -d @$ts +%s` - `date --utc -d @$TODAY +%s`) / (24*3600)" | bc -l | cut -d"." -f1)
    #     days=${days:-0} # Set to 0 if empty (indicating today)

    #     # Print days out
    #     if [ "$days" != "$LAST_DAY" ]; then
    #         LAST_DAY=$days
    #         tput setaf 11
    #         case $days in
    #             0)
    #                 echo -e "Today"
    #                 ;;
    #             1)
    #                 echo -e $(date -d @$ts +%m/%d)"\tTomorrow"
    #                 ;;
    #             *)
    #                 echo -e $(date -d @$ts +%m/%d)"\t${days} days"
    #                 ;;
    #         esac
    #         tput sgr0
    #     fi

    #     now=$(date +%s)
    #     if [[ $now -gt $LAST_TS && $now -lt $ts ]]; then
    #         echo -e "--------$(tput setaf 3)Now$(tput sgr 0)--------\n"
    #     fi
    #     LAST_TS=$ts

    #     # Print event info
    #     echo -e "$(date -d @$ts +%H:%M)\t$(tput setaf 2)${summ}$(tput sgr 0)"
    #     if [ -n "$loc" ]; then echo -e "\t${loc}"; fi
    #     if [ -n "$desc" ]; then
    #         # Indent description
    #         desc=$(echo -e "${desc}" | sed 's/^/\t/')
    #         echo -e "${desc}\n"
    #     else
    #         echo ""
    #     fi
    # done
}

# Send notification for upcoming event
# Track which events we've already sent notifications for
NOTIFIED=()
decide_remind() {
    ts=$1
    now=$(date --utc +%s)
    # echo ${event[SUMMARY]}
    # echo "Now:"$(date -d @$now)
    # echo "Starts:"$(date -d @$ts)
    # echo "==="
    hash=$(echo "${ts}_${event[SUMMARY]}" | md5sum | awk '{ print $1 }')
    if [[ ! "${NOTIFIED[*]}" =~ "${hash}" ]]; then
        diff=$(($ts - $now))
        # Should probably parse the ics TRIGGER value,
        # but for now easier to just set fixed reminders
        if [[ $diff -gt 0 && $diff -lt $REMINDER_TIME ]]; then
            NOTIFIED+=($hash)
            summary=${event[SUMMARY]}
            time=$(date -d @$ts +%H:%M) # Display local time
            echo "[${time}] ${summary}"
            notify-send -t 0 "[${time}] ${summary}"
        fi
    fi
}

# Check the reminder file,
# create a notification for upcoming events
remind() {
    while IFS= read -r line; do
        if [ -f "$line" ]; then
            iterate_events decide_remind $line
        fi
    done < "$UPCOMING_FILE"
}

update() {
    # Only check ics files modified after this datetime
    # Start with 0 so on a first run this will refresh everything
    last_updated=0
    [ -e "$UPCOMING_FILE" ] && rm "$UPCOMING_FILE"

    while true; do
        echo "Updating..."
        NOW=$(date +%s)

        # Check which ics files have upcoming events
        for f in ~/.calendar/**/*.ics; do
            modified=$(date +%s -r "$f")
            if [[ "$modified" -gt "$last_updated" ]]; then
                iterate_events check_event $f
            fi
        done
        last_updated=$NOW
        echo "Done"
        sleep 600
    done
}

if [[ $1 == 'view' ]]; then
    # Show upcoming agenda
    # Usage: upcoming view [DAYS]
    # DAYS defaults to 2
    # view_upcoming ${2:-2} | less -R
    view_upcoming ${2:-2}

elif [[ $1 == 'remind' ]]; then
    while true; do
        remind
        sleep 60
    done

elif [[ $1 == 'update' ]]; then
    update

elif [[ $1 == 'daemon' ]]; then
    # Update upcoming events in the background
    update &
    P1=$!

    while true; do
        remind
        sleep 60
    done
    wait $P1
fi
